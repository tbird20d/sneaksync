Todo file for dropsync:

 - categorize the features 
 - improve documentation
   - explain all configuration options
   - explain all command-line options
   - give usage examples (one is in README.txt already)
 - change README.txt to use github markup

= bugfixes blocking release =
 - windows sender didn't avoid sending new files
   - size throttling isn't working
   - I had 3.4G of files in the dropbox folder
   - Dropbox reporting that I used 207% of 5GB limit
   - after running receiver once (acutally, rm -rf ; ctrl-C, sda-receive.sh)
     - another 9GB of files showed up in the transfer directory (??)

= documentation =
 - list exclude patterns that are useful in Windows and Linux
   - eg. \\AppData\\.*[Cc]ache
   - NTUSER.dat ntuser
   - (see windows-sender.conf)

= other bugfixes
 - fix problem with violation of transfer_size_limit 
   - first batch of 442 files created, then another batch created again
   - is data not re-initializing properly when doing period looping??
   - is data.transfer_file_total_size getting reset to 0?
   - need to verify if this is still a bug

 - do a different file size limit for deletion (don't check size of file
   content, but only size of transfer file.
   - have a separate within_transfer_limit() for deletions?
     - pass content size to within_transfer_limit

= other high-priority features =
 - put amount still outstanding in sender log
   - keep size_skipped, parts_skipped, deletes_skipped stats

related to:
 - have an option for just comparing source and destination index, to
   report the current size of the difference between the two (how much is
   currently out-of-sync)
   - this is currently done by show-remaining, not in 'sneaksync' proper

== other features ==
 - add logfile to config
 - support USB-stick mode:
   - auto-run on insertion of stick
     - see http://www.instructables.com/id/How-to-make-flash-drive-that-copys-users-files-si/4/
     - add marker file to identify source dir on source machine

   - auto-detect sender or receiver mode
   - sync and unmount when transfer is complete
   - make a test config file for a USB stick

 - don't run receiver until transfer files have been synched to destination
   - detect transfer complete (how?- separate header and content??)
     - make a transfer list? (only receiver would check it, and it's not
        running)
       - would have list of all expected transfer files
       - receiver could defer running if transfer files haven't shown up yet
         - could check frequently and see if anything is changing in sync_dir
         - check for missing sequence numbers, and wait until they show up
          
     - OR, put content in separate file
       - don't process a transfer file until content size matches transfer
 - process transfer files as they arrive (and are valid?)
   - check content size in first line against content size of file
     - get size of header line, and subtract from full file size
   - check content sha1 to validate it's all there? (probably not)

== nice-to-have ==
 - add show_activity to reading_index and writing_index
 - have 2 periods?
   - one for when we have files outstanding and one for when we don't
 - send more data even if dest_sequence doesn't change, if
     we skipped items, and there are no transfer files
   - ie use absence of transfer files to trigger sending more data
   - this allows overlapping dest_index update and new sends

easy - add areas to dprint()
   - add debug_list
   - add area to each dprint statement - (there are 66 dprints)
     - determine allowed areas
       - indexing, sha1, transfers, all
   - only print if debug == "all" or dprint area matches item in debug_list
 - combine walk_tree_for_updates() and walk_tree_for_removes()
   - routines are almost identical - just have one if condition different
 - read and write updates to index files directly in file instead of in memory
   - allows for arbitrarily large indexes
   - don't know if this scales well, adding a new entry at the beginning of
      the file requires pushing everything down (re-writing entire file)
     - leave space for new entries?
 - make standalone Windows executable - use py2exe
 - have period be from start of program, not end of operations
   - so if started at 8:00 am, then run would be 10:00 at (at period 120),
     instead of, say 10:13 (assuming a 13-minute run)
 - support multiple indices (sync-sets) in the same sync_dir
   - allow for specifying the index filename in the config
     - default to source_index and dest_index?
 - keep path of indexed directory in index file (why?)
    (and sanity check before overwriting)
 - avoid errors based on incorrect -r or -s line:
   - have source_dir be empty in receiver config and dest_dir be empty in
	sender config
 - show progress of operation
   - assume 1000 files-per-minute indexing, and give time estimate
   - measure file copy time, and give time estimate
   - use terminal code to update index line every 2 seconds
     - find total number of files to index first, and give a yy of xx status?
 - show progress percentage (dup)
   - create work estimate
	- count of previous index lines?
	- count of in-memory index entries?
   - keep track of progress
	- lines of index written
   - write percentage
 - if sha1 is OK but other attributes are not, only send entry_line
   - don't send the content, and mark this as an attribute update only
 - use inotify to monitor directories for changes
   - monitor source_dir (sender)
   - monitor sync_dir (sender and receiver)
 - use an option to control 'delete in destination' (don't do it by default)
 - handle permissions correctly - do something with permissions
   - hard for cross-OS stuff (what to do with Windows perms?)
 - detect that root sha1 did not change after a receive (that processed
   transfer files), and do a full re-index without a cache
   - this is expensive, but is a last resort if something weird happens
   - get root sha1 from previous dest_index, compare to root sha1
   - do this in update_index??
   - just delete dest_index file and do update_index()
   - low priority, because can manually delete dest_index
easy - get rid of -vv (it's too much?)

== low-priority bugs ==
 - dropsync doesn't integrate the logs from each side
   - if sender and receiver are writing to the same log at the same time,
	confusion can result
   - short-term solution: don't use the same log
 - don't process a transfer file if content size doesn't match
     entry size

== testing ==
 - test using different OS for sender and receiver (e.g. Windows to Linux)
   + try windows cygwin to linux
   + try windows to linux
   - try windows to windows
   - try linux to windows
   - try windows to android
   - try android to windows
   - try linux to android
   - try android to linux

== long-term ideas ==
 - support sending transfer files by e-mail
   - make part_size 10M (or whatever email allows)
   - make a separate program to send e-mails from sync_dir on sender
     to a specified e-mail address
   - make a program to receive e-mails and put them in sync_dir
     on receiver side
     - send an ACK back to sender, and have sender remove from sync_dir
       on the sender side
     - after accumulating transfer files, execute sneaksync on receiver
   - make dest_index a source, and send it back in parts by e-mail using
     receiver as sender and vice-versa
   - throttle the e-mails to avoid getting marked as spam

 - have phone be the sync_dir
   - support initiating transfers when phone connects to specific networks
   - e.g. when connected to source network, run sender, and when connected
	to dest network, run receiver, automatically (phone is intermediary)
   - may need to get permission to launch actions on host

 - send deltas instead of full files for file updates
   - lots of work!, but would save bandwidth on updates
   - sneaksync is mostly about non-changing files (like media), so this is
     low priority
   - can use rsync techniques (but this requires two-way communication)
     - rsync has sub-programs to create index, delta, etc.
