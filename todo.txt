Todo file for dropsync:

== 1.0 features ==
2 - support partitioning files (for files larger than size limit)
   - on sender: when making transfer file:
     - if file is bigger than transfer_file_size_limit, then:
       - add file.partyyofxx to index file, but not in filesystem
         - make transfer file with extension .partyyofxx
         - transfer type is 'p'
   - on receiver: after processing transfer files,
     - if files end in .partyyofxx,
       - put .partyyofxx data directly into large file at correct offset 
     - make index with .partyyofxx entries

1 - automatically run the sender and receiver
   1 - add lock file?
   - use sequence number to determine if update in other index has occurred
     - when updating my_index,
       - set my_index sequence to be other_index sequence+1
         - create function get_sequence(index)
     - if other_index > my_index, run
   - don't run unless transfer files have been synched to destination
     - detect transfer complete (how?)
       - make a transfer list? (only receiver would check it, and it's not
          running)
         - would have list of all expected transfer files
         - receiver can postpone running if transfer files haven't shown up yet
	    - should check frequently and see if anything is changing in sync_dir

 - fix bugs found:
   - IMG_7449.JPG is not synch-ing.  It was transfered several times, and
     processed by the receiver multiple times.  Why?
   - need to lock each side, to keep from processing partially written transfer
     or index files
     - create a file lock - if present, hold off

== other features ==
 - support USB-stick mode:
   - auto-run on insertion of stick
     - see http://www.instructables.com/id/How-to-make-flash-drive-that-copys-users-files-si/4/
     - add marker file to identify source dir on source machine

   - auto-detect sender or receiver mode
   - sync and unmount when transfer is complete
   - make a test config file for a USB stick

== low-priority bugs ==
   - internal mechanism for tracking transfer files is kludgy
     - current method uses a missing attribute and exceptions
   - dropsync doesn't integrate the logs from each side
   - don't process a transfer file if content size doesn't match
     entry size

== nice-to-have ==
 - make standalone Windows executable - use py2exe
 - have an option for just comparing source and destination index, to
   report the current size of the difference between the two (how much is
   currently out-of-sync)
 - have period be from start of program, not end of operations
   - so if started at 8:00 am, then run would be 10:00 at (at period 120),
     instead of, say 10:13 (assuming a 13-minute run)
 - support multiple indices (sync-sets) in the same sync_dir
   - allow for specifying the index filename in the config
     - default to source_index and dest_index?
 - should process transfer files in numerical order (just to not look weird)
 - keep path of indexed directory in index file (why?)
    (and sanity check before overwriting)
 - avoid errors based on incorrect -r or -s line:
   - have source_dir be empty in receiver config and dest_dir be empty in
	sender config
 - change name to syncdir-amp (for sync_dir amplifier)
 - show progress of operation
   - assume 1000 files-per-minute indexing, and give time estimate
   - measure file copy time, and give time estimate
 - if sha1 is OK but other attributes are not, only send entry_line
   - don't send the content, and mark this as an attribute update only
 - use inotify to monitor directories for changes
   - monitor source_dir (sender)
   - monitor sync_dir (sender and receiver)
 - use an option to specify 'delete in destination' (don't do it by default)
 - handle permissions correctly

== testing ==
 - support running directly from Windows (check that paths all work)
 - test using different OS for sender and receiver (e.g. Windows to Linux)
   - am using cygwin to Linux, but not Windows to Linux yet

== long-term ideas ==
 - support sending transfer files by e-mail
 - send deltas instead of full files (lots of work!, but would save bandwidth)
